apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Chart.Name }}"
  labels:
    app: "{{ .Chart.Name }}"
spec:
  replicas: "{{ .Values.replicaCount }}"
  selector:
    matchLabels:
      app: "{{ .Chart.Name }}"
  template:
    metadata:
      name: "{{ .Chart.Name }}"
      labels:
        app: "{{ .Chart.Name }}"
    spec:
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: "{{ .Chart.Name }}-config"
          env:
            {{- $services := (lookup "v1" "Service" .Release.Namespace "") }}
            {{- $redisSvc := (index (where $services.items "metadata.labels.role" "category-app-redis") 0) }}
            {{- $postgresSvc := (index (where $services.items "metadata.labels.role" "category-app-postgres") 0) }}

            - name: SPRING_DATASOURCE_URL
              value: {{ printf "jdbc:postgresql://%s:%d/category-app" $postgresSvc.metadata.name (index $postgresSvc.spec.ports 0).port }}

            - name: SPRING_DATA_REDIS_HOST
              value: {{ $redisSvc.metadata.name }}

            - name: SPRING_DATA_REDIS_PORT
              value: {{ (index $redisSvc.spec.ports 0).port | quote }}

            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.secret.name }}"
                  key: "{{ .Values.secret.keys.postgresUsername }}"

            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.secret.name }}"
                  key: "{{ .Values.secret.keys.postgresPassword }}"

            - name: SPRING_DATA_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.secret.name }}"
                  key: "{{ .Values.secret.keys.redisPassword }}"
      restartPolicy: Always